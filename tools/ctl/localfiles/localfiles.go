package localfiles

import (
	"os"
	"path/filepath"

	"github.com/go-git/go-billy/v5"
	"github.com/go-git/go-billy/v5/osfs"
	"github.com/google/oss-rebuild/pkg/rebuild/rebuild"
	"github.com/pkg/errors"
)

// LocalFileStore provides access to local file-based resources.
type LocalFileStore struct {
	root billy.Filesystem
}

// NewLocalFileStore creates a new LocalFileStore rooted at the given path.
func NewLocalFileStore(rootPath string) (*LocalFileStore, error) {
	if err := os.MkdirAll(rootPath, 0755); err != nil {
		return nil, errors.Wrapf(err, "failed to create directory %s", rootPath)
	}
	return &LocalFileStore{root: osfs.New(rootPath)}, nil
}

const (
	// Subdirectories
	assets    = "assets"     // AssetStore used to cache logs, artifacts, and other assets manipulated by ctl.
	rundex    = "rundex"     // The local metadata about runs and attempts, normally generated by local smoketets benchmarks.
	buildDefs = "build-defs" // Working copy of build definitions.
)

// Rundex returns a filesystem for the rundex subdirectory.
func (lfs *LocalFileStore) Rundex() (billy.Filesystem, error) {
	return lfs.root.Chroot(rundex)
}

// AssetsPath returns the path to the assets subdirectory.
func (lfs *LocalFileStore) AssetsPath() string {
	return filepath.Join(lfs.root.Root(), assets)
}

// BuildDefs returns a filesystem asset store for build definitions.
func (lfs *LocalFileStore) BuildDefs() (*rebuild.FilesystemAssetStore, error) {
	dir := filepath.Join(lfs.root.Root(), assets)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return nil, errors.Wrapf(err, "failed to create directory %s", dir)
	}
	assetsFS, err := osfs.New("/").Chroot(dir)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to chroot into directory %s", dir)
	}
	return rebuild.NewFilesystemAssetStore(assetsFS), nil
}

// AssetStore returns a filesystem asset store for a specific run.
func (lfs *LocalFileStore) AssetStore(runID string) (*rebuild.FilesystemAssetStore, error) {
	dir := filepath.Join(lfs.root.Root(), assets, runID)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return nil, errors.Wrapf(err, "failed to create directory %s", dir)
	}
	assetsFS, err := osfs.New("/").Chroot(dir)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to chroot into directory %s", dir)
	}
	return rebuild.NewFilesystemAssetStore(assetsFS), nil
}
