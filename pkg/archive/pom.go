package archive

import (
	"encoding/xml"
	"regexp"
)

type build struct {
	Plugins struct {
		Plugin []struct {
			ArtifactID    string `xml:"artifactId"`
			GroupID       string `xml:"groupId"`
			Configuration struct {
				// This is the property that contains the name of the git properties file.
				GenerateGitPropertiesFilename string `xml:"generateGitPropertiesFilename"`
			} `xml:"configuration"`
		} `xml:"plugin"`
	} `xml:"plugins"`
}

type project struct {
	Build build `xml:"build"`

	Profiles struct {
		Profile []struct {
			Build build `xml:"build"`
		} `xml:"profile"`
	} `xml:"profiles"`
}

func getAllGitPropertiesFileInPom(pom []byte) []string {
	// This function returns all the git properties files that are generated by git-commit-id-maven-plugin
	// in the given pom file.
	// In theory, there can be multiple git properties files in a single pom file so we return a list of them.
	mavenProject := project{}
	err := xml.Unmarshal(pom, &mavenProject)
	if err != nil {
		return []string{}
	}
	gitPropertiesFiles := getGitPropertiesFilename(mavenProject.Build)
	for _, profile := range mavenProject.Profiles.Profile {
		gitPropertiesFiles = append(gitPropertiesFiles, getGitPropertiesFilename(profile.Build)...)
	}
	if len(gitPropertiesFiles) == 0 {
		gitPropertiesFiles = append(gitPropertiesFiles, defaultGitPaths...)
	}
	return gitPropertiesFiles
}

func getGitPropertiesFilename(build build) []string {
	var gitPropertiesFiles []string
	for _, plugin := range build.Plugins.Plugin {
		if plugin.ArtifactID == "git-commit-id-plugin" && plugin.GroupID == "pl.project13.maven" {
			gitPropertiesFiles = append(gitPropertiesFiles, parsePomProperties(plugin.Configuration.GenerateGitPropertiesFilename))
		}
	}
	return gitPropertiesFiles
}

func parsePomProperties(property string) string {
	// Usually, no one overrides the default properties of the maven build.
	// If they do, we would need to parse the properties in POM file.
	defaultProperties := map[string]string{
		"project.build.directory":       "",
		"project.build.outputDirectory": "classes",
	}
	propertyRegex := regexp.MustCompile(`\$\{[^}]+\}/?`)
	return propertyRegex.ReplaceAllString(property, defaultProperties[property])
}

var defaultGitPaths = []string{
	"git.properties",
	"git.json",
}
